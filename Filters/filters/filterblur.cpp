#include "filterblur.h"

#include <QComboBox>
#include <QGridLayout>
#include <QLabel>

#include "filterfactory.h"
AUTOREGISTER(FilterBlur)


static std::vector<float> kernels[3][4]{
    //sigma = 1
    {
        //n = 3
        {

            0.077847, 0.123317, 0.077847,
            0.123317, 0.195346, 0.123317,
            0.077847, 0.123317, 0.077847,
        },
        //n = 5
        {

            0.003765, 0.015019, 0.023792, 0.015019, 0.003765,
            0.015019, 0.059912, 0.094907, 0.059912, 0.015019,
            0.023792, 0.094907, 0.150342, 0.094907, 0.023792,
            0.015019, 0.059912, 0.094907, 0.059912, 0.015019,
            0.003765, 0.015019, 0.023792, 0.015019, 0.003765,
        },
        // n = 7
        {

            0.000036, 0.000363, 0.001446, 0.002291, 0.001446, 0.000363, 0.000036,
            0.000363, 0.003676, 0.014662, 0.023226, 0.014662, 0.003676, 0.000363,
            0.001446, 0.014662, 0.058488, 0.092651, 0.058488, 0.014662, 0.001446,
            0.002291, 0.023226, 0.092651, 0.146768, 0.092651, 0.023226, 0.002291,
            0.001446, 0.014662, 0.058488, 0.092651, 0.058488, 0.014662, 0.001446,
            0.000363, 0.003676, 0.014662, 0.023226, 0.014662, 0.003676, 0.000363,
            0.000036, 0.000363, 0.001446, 0.002291, 0.001446, 0.000363, 0.000036
        },
        //n = 9
        {
            0, 0.000001, 0.000014, 0.000055, 0.000088, 0.000055, 0.000014, 0.000001, 0,
            0.000001, 0.000036, 0.000362, 0.001445, 0.002289, 0.001445, 0.000362, 0.000036, 0.000001,
            0.000014, 0.000362, 0.003672, 0.014648, 0.023205, 0.014648, 0.003672, 0.000362, 0.000014,
            0.000055, 0.001445, 0.014648, 0.058434, 0.092566, 0.058434, 0.014648, 0.001445, 0.000055,
            0.000088, 0.002289, 0.023205, 0.092566, 0.146634, 0.092566, 0.023205, 0.002289, 0.000088,
            0.000055, 0.001445, 0.014648, 0.058434, 0.092566, 0.058434, 0.014648, 0.001445, 0.000055,
            0.000014, 0.000362, 0.003672, 0.014648, 0.023205, 0.014648, 0.003672, 0.000362, 0.000014,
            0.000001, 0.000036, 0.000362, 0.001445, 0.002289, 0.001445, 0.000362, 0.000036, 0.000001,
            0, 0.000001, 0.000014, 0.000055, 0.000088, 0.000055, 0.000014, 0.000001, 0

        }
    },

    //sigma = 1.5
    {
        //n = 3
        {
            0.095332, 0.118095, 0.095332,
            0.118095, 0.146293, 0.118095,
            0.095332, 0.118095, 0.095332
        },
        //n = 5
        {
            0.015026, 0.028569, 0.035391, 0.028569, 0.015026,
            0.028569, 0.054318, 0.067288, 0.054318, 0.028569,
            0.035391, 0.067288, 0.083355, 0.067288, 0.035391,
            0.028569, 0.054318, 0.067288, 0.054318, 0.028569,
            0.015026, 0.028569, 0.035391, 0.028569, 0.015026

        },
        // n = 7
        {
            0.0015, 0.00438, 0.008328, 0.010317, 0.008328, 0.00438, 0.0015,
            0.00438, 0.012788, 0.024314, 0.03012, 0.024314, 0.012788, 0.00438,
            0.008328, 0.024314, 0.046228, 0.057266, 0.046228, 0.024314, 0.008328,
            0.010317, 0.03012, 0.057266, 0.07094, 0.057266, 0.03012, 0.010317,
            0.008328, 0.024314, 0.046228, 0.057266, 0.046228, 0.024314, 0.008328,
            0.00438, 0.012788, 0.024314, 0.03012, 0.024314, 0.012788, 0.00438,
            0.0015, 0.00438, 0.008328, 0.010317, 0.008328, 0.00438, 0.0015
        },
        //n = 9
        {
            0.000072, 0.000323, 0.000944, 0.001794, 0.002222, 0.001794, 0.000944, 0.000323, 0.000072,
            0.000323, 0.00145, 0.004233, 0.008048, 0.00997, 0.008048, 0.004233, 0.00145, 0.000323,
            0.000944, 0.004233, 0.012358, 0.023496, 0.029106, 0.023496, 0.012358, 0.004233, 0.000944,
            0.001794, 0.008048, 0.023496, 0.044672, 0.055338, 0.044672, 0.023496, 0.008048, 0.001794,
            0.002222, 0.00997, 0.029106, 0.055338, 0.068552, 0.055338, 0.029106, 0.00997, 0.002222,
            0.001794, 0.008048, 0.023496, 0.044672, 0.055338, 0.044672, 0.023496, 0.008048, 0.001794,
            0.000944, 0.004233, 0.012358, 0.023496, 0.029106, 0.023496, 0.012358, 0.004233, 0.000944,
            0.000323, 0.00145, 0.004233, 0.008048, 0.00997, 0.008048, 0.004233, 0.00145, 0.000323,
            0.000072, 0.000323, 0.000944, 0.001794, 0.002222, 0.001794, 0.000944, 0.000323, 0.000072
        }
    },

    //sigma = 2
    {
        //n = 3
        {

            0.102059, 0.115349, 0.102059,
            0.115349, 0.130371, 0.115349,
            0.102059, 0.115349, 0.102059
        },
        //n = 5
        {

            0.023528, 0.033969, 0.038393, 0.033969, 0.023528,
            0.033969, 0.049045, 0.055432, 0.049045, 0.033969,
            0.038393, 0.055432, 0.062651, 0.055432, 0.038393,
            0.033969, 0.049045, 0.055432, 0.049045, 0.033969,
            0.023528, 0.033969, 0.038393, 0.033969, 0.023528
        },
        // n = 7
        {
            0.005084, 0.009377, 0.013539, 0.015302, 0.013539, 0.009377, 0.005084,
            0.009377, 0.017296, 0.024972, 0.028224, 0.024972, 0.017296, 0.009377,
            0.013539, 0.024972, 0.036054, 0.040749, 0.036054, 0.024972, 0.013539,
            0.015302, 0.028224, 0.040749, 0.046056, 0.040749, 0.028224, 0.015302,
            0.013539, 0.024972, 0.036054, 0.040749, 0.036054, 0.024972, 0.013539,
            0.009377, 0.017296, 0.024972, 0.028224, 0.024972, 0.017296, 0.009377,
            0.005084, 0.009377, 0.013539, 0.015302, 0.013539, 0.009377, 0.005084

        },
        //n = 9
        {
            0.000814, 0.001918, 0.003538, 0.005108, 0.005774, 0.005108, 0.003538, 0.001918, 0.000814,
            0.001918, 0.00452, 0.008338, 0.012038, 0.013605, 0.012038, 0.008338, 0.00452, 0.001918,
            0.003538, 0.008338, 0.015378, 0.022203, 0.025094, 0.022203, 0.015378, 0.008338, 0.003538,
            0.005108, 0.012038, 0.022203, 0.032057, 0.036231, 0.032057, 0.022203, 0.012038, 0.005108,
            0.005774, 0.013605, 0.025094, 0.036231, 0.04095, 0.036231, 0.025094, 0.013605, 0.005774,
            0.005108, 0.012038, 0.022203, 0.032057, 0.036231, 0.032057, 0.022203, 0.012038, 0.005108,
            0.003538, 0.008338, 0.015378, 0.022203, 0.025094, 0.022203, 0.015378, 0.008338, 0.003538,
            0.001918, 0.00452, 0.008338, 0.012038, 0.013605, 0.012038, 0.008338, 0.00452, 0.001918,
            0.000814, 0.001918, 0.003538, 0.005108, 0.005774, 0.005108, 0.003538, 0.001918, 0.000814
        }
    }
};

FilterBlur::FilterBlur() :
    currentSigma(0),
    currentDim(0)
{
    QWidget *settingsWidget = getSettingsWidget();
    qDeleteAll(settingsWidget->children());

    QGridLayout *layout = new QGridLayout(settingsWidget);
    settingsWidget->setLayout(layout);

    QComboBox *sigmaBox = new QComboBox(settingsWidget);
    QComboBox *dimBox = new QComboBox(settingsWidget);
    layout->addWidget(sigmaBox, 1, 0);
    layout->addWidget(dimBox, 1, 1);
    layout->addWidget(new QLabel("Sigma: ", settingsWidget), 0, 0);
    layout->addWidget(new QLabel("Kernel size: ", settingsWidget), 0, 1);

    sigmaBox->addItems({"1", "1.5", "2"});
    dimBox->addItems({"3", "5", "7", "9"});

    connect(sigmaBox, static_cast<void (QComboBox::*)(int)>(&QComboBox::activated), this, [this](int i){
        currentSigma = i;
        emit settingsChanged();
    });
    connect(dimBox, static_cast<void (QComboBox::*)(int)>(&QComboBox::activated), this, [this](int i){
        currentDim = i;
        emit settingsChanged();
    });
}

QKeySequence FilterBlur::getShortcut()
{
    return QKeySequence("Ctrl+B");
}

QString FilterBlur::getText()
{
    return "Blur";
}

QString FilterBlur::getDescription()
{
    return "Convolve the image with Gaussian blur";
}

std::vector<float> FilterBlur::getMatrix()
{
    return kernels[currentSigma][currentDim];
}
